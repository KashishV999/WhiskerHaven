<!------This file has Reddit style recursive comment Threading feature -->
<!------This file has Google Maps integration feature -->

<% layout("/layouts/boilerplate") %>

<!-----Script for Google Maps integration-->
<script
  async
  defer
  src="https://maps.googleapis.com/maps/api/js?key=<%= GOOGLE_MAPS_API %>&callback=initMap"
></script>




<div class="container px-4 md:px-6 mx-auto pt-8 md:pt-12 pb-0">
  <div class="flex items-center gap-2 mb-6">
    <a
      href="/shelters"
      class="flex items-center text-sm text-gray-500 hover:text-gray-900"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="mr-1 h-4 w-4"
      >
        <path d="m15 18-6-6 6-6"></path>
      </svg>
      Back to Shelters
    </a>
  </div>

  <div class="grid gap-8 lg:grid-cols-[2fr_1fr] lg:gap-12">
    <!-- Main content column -->
    <div class="space-y-6">
      <header class="space-y-4">
        <div class="overflow-hidden rounded-lg">
          <img
            src="<%= shelter.image %>"
            alt="Image of <%= shelter.name %>, a <%= shelter.location %> location"
            class="aspect-[16/9] w-full object-cover rounded-lg"
          />
        </div>
        <div class="space-y-2">
          <h1 class="text-3xl font-bold tracking-tight"><%= shelter.name %></h1>
          <div class="flex items-center text-sm text-gray-500">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="mr-1 h-4 w-4"
            >
              <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"></path>
              <circle cx="12" cy="10" r="3"></circle>
            </svg>
            <span><%= shelter.location %></span>
          </div>
        </div>
      </header>

      <!-- Tabs -->
      <div class="border-b">
        <nav class="flex gap-4" aria-label="Tabs">
          <button
            onclick="showSection('about')"
            class="tab-button border-b-2 border-transparent px-1 pb-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            id="about-tab"
          >
            About
          </button>
          <button
            onclick="showSection('available')"
            class="tab-button border-b-2 border-transparent px-1 pb-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            id="available-tab"
          >
            Available Pets
          </button>
          <button
            onclick="showSection('process')"
            class="tab-button border-b-2 border-transparent px-1 pb-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            id="process-tab"
          >
            Adoption Process
          </button>
          <button
            onclick="showSection('contact')"
            class="tab-button border-b-2 border-transparent px-1 pb-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            id="contact-tab"
          >
            Contact
          </button>
          <button
            class="tab-button border-b-2 border-transparent px-1 pb-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            id="comments-tab"
          >
            <a href="#comments-section">Comment</a>
          </button>
        </nav>
      </div>

      <!-- Tab content -->
      <div id="about" class="tab-content space-y-6">
        <section aria-labelledby="shelter-details" class="space-y-6">
          <div class="prose max-w-none">
            <p class="text-gray-700"><%= shelter.description %></p>
          </div>

          <div class="space-y-4">
            <h2 class="text-2xl font-bold">Our Mission</h2>
            <p class="text-gray-700"><%= shelter.mission %></p>
          </div>
        </section>
      </div>

      <div id="available" class="tab-content space-y-6 hidden">
        <h2 class="text-2xl font-bold">Available Cats</h2>

        <% if (shelter.cats && shelter.cats.length > 0) { %>
        <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
          <% shelter.cats.forEach((cat) => { %>
          <div
            class="overflow-hidden rounded-lg border bg-white shadow-sm transition-all hover:shadow-md"
          >
            <div class="relative">
              <img
                src="<%= cat.image %>"
                alt="<%= cat.name %>"
                class="aspect-[4/3] w-full object-cover"
              />
            </div>
            <div class="p-4">
              <div class="space-y-2">
                <div class="flex items-center justify-between">
                  <h3 class="font-bold"><%= cat.name %></h3>
                  <span class="text-sm text-gray-500"
                    ><%= cat.age %> years</span
                  >
                </div>
                <p class="text-sm text-gray-500">
                  <%= cat.breed %> â€¢ <%= cat.gender %>
                </p>
                <p class="text-sm line-clamp-2"><%= cat.description %></p>
              </div>
            </div>
            <div class="p-4 pt-0">
              <a
                href="/cats/<%= cat._id %>"
                class="inline-flex w-full items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2"
              >
                View Details
              </a>
            </div>
          </div>
          <% }) %>
        </div>
        <% } else { %>
        <div
          class="flex flex-col items-center justify-center py-12 text-center bg-gray-50 rounded-lg"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="h-16 w-16 text-gray-400 mb-4"
          >
            <path d="M17.5 5.5C19 7 20.5 9 21 11c-2.5.5-5 .5-8.5-1"></path>
            <path d="M5.5 17.5C7 19 9 20.5 11 21c.5-2.5.5-5-1-8.5"></path>
            <path d="M16.5 11.5c1 2 1 3.5 1 6-2.5 0-4 0-6-1"></path>
            <path d="M20 11.5c1 1.5 2 3.5 2 4.5-1.5.5-3 0-4.5-.5"></path>
            <path d="M11.5 20c1.5 1 3.5 2 4.5 2 .5-1.5 0-3-.5-4.5"></path>
            <path d="M20.5 16.5c1 2 1.5 3.5 1.5 5.5-2 0-3.5-.5-5.5-1.5"></path>
            <path
              d="M4.783 4.782C1.073 8.492 1 14.5 5 18c3.5-5-2-12-2-12 0 0 7 5.5 12 2-3.5-4-9.508-3.927-13.217-.218Z"
            ></path>
            <path d="M4.5 4.5 3 3c0 0 6 6 4 8-2-2-8-4-8-4l1.5-1.5"></path>
          </svg>
          <h3 class="text-lg font-medium mb-2">No cats available</h3>
          <p class="text-gray-500 max-w-md">
            This shelter currently doesn't have any cats available for adoption.
            Please check back later or contact the shelter for more information.
          </p>
        </div>
        <% } %>
      </div>

      <div id="process" class="tab-content space-y-6 hidden">
        <h2 class="text-2xl font-bold">Our Adoption Process</h2>
        <ol class="space-y-4 ml-6 list-decimal">
          <li class="text-gray-700 pl-2">
            Browse our available pets online or visit our shelter
          </li>
          <li class="text-gray-700 pl-2">Fill out an adoption application</li>
          <li class="text-gray-700 pl-2">
            Meet with our adoption counselors for an interview
          </li>
          <li class="text-gray-700 pl-2">Meet your potential new pet</li>
          <li class="text-gray-700 pl-2">
            Complete the adoption paperwork and pay the adoption fee
          </li>
          <li class="text-gray-700 pl-2">Take your new family member home!</li>
        </ol>

        <div class="mt-6 p-6 bg-gray-50 rounded-lg">
          <h3 class="text-lg font-medium mb-4">Ready to adopt?</h3>
          <p class="text-gray-700 mb-4">
            Start the process by browsing our available cats or contacting us
            directly.
          </p>
          <div class="flex flex-col sm:flex-row gap-4">
            <a
              href="#"
              onclick="showSection('available')"
              class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2"
            >
              View Available Cats
            </a>
            <a
              href="#"
              onclick="showSection('contact')"
              class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2"
            >
              Contact Us
            </a>
          </div>
        </div>
      </div>

      <div id="contact" class="tab-content space-y-6 hidden">
        <h2 class="text-2xl font-bold">Contact Information</h2>

        <div class="grid gap-6 md:grid-cols-2">
          <div class="space-y-4">
            <div class="flex items-start space-x-3">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="h-5 w-5 text-gray-500 mt-0.5"
              >
                <path
                  d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"
                ></path>
              </svg>
              <div>
                <h3 class="font-medium">Phone</h3>
                <p class="text-gray-700"><%= shelter.phone %></p>
              </div>
            </div>

            <div class="flex items-start space-x-3">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="h-5 w-5 text-gray-500 mt-0.5"
              >
                <rect width="20" height="16" x="2" y="4" rx="2"></rect>
                <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path>
              </svg>
              <div>
                <h3 class="font-medium">Email</h3>
                <p class="text-gray-700"><%= shelter.email %></p>
              </div>
            </div>

            <div class="flex items-start space-x-3">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="h-5 w-5 text-gray-500 mt-0.5"
              >
                <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"></path>
                <circle cx="12" cy="10" r="3"></circle>
              </svg>
              <div>
                <h3 class="font-medium">Address</h3>
                <p class="text-gray-700"><%= shelter.location %></p>
              </div>
            </div>
          </div>

          <div class="space-y-4">
            <h3 class="font-medium">Hours of Operation</h3>
            <div class="space-y-2 text-sm">
              <div class="flex justify-between">
                <span class="font-medium">Monday</span>
                <span class="text-gray-500"><%= shelter.hours.Monday %></span>
              </div>
              <div class="flex justify-between">
                <span class="font-medium">Tuesday</span>
                <span class="text-gray-500"><%= shelter.hours.Tuesday %></span>
              </div>
              <div class="flex justify-between">
                <span class="font-medium">Wednesday</span>
                <span class="text-gray-500"
                  ><%= shelter.hours.Wednesday %></span
                >
              </div>
              <div class="flex justify-between">
                <span class="font-medium">Thursday</span>
                <span class="text-gray-500"><%= shelter.hours.Thursday %></span>
              </div>
              <div class="flex justify-between">
                <span class="font-medium">Friday</span>
                <span class="text-gray-500"><%= shelter.hours.Friday %></span>
              </div>
              <div class="flex justify-between">
                <span class="font-medium">Saturday</span>
                <span class="text-gray-500"><%= shelter.hours.Saturday %></span>
              </div>
              <div class="flex justify-between">
                <span class="font-medium">Sunday</span>
                <span class="text-gray-500"><%= shelter.hours.Sunday %></span>
              </div>
            </div>
          </div>
        </div>

        <div class="mt-6 p-6 bg-gray-50 rounded-lg">
          <h3 class="text-lg font-medium mb-4">Send us a message</h3>
          <form class="space-y-4" id="contact-form">
            <div class="grid gap-4 sm:grid-cols-2">
              <div class="space-y-2">
                <label for="name" class="text-sm font-medium">Name</label>
                <input
                  id="name"
                  name="name"
                  class="w-full h-10 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm"
                  placeholder="Your name"
                />
              </div>
              <div class="space-y-2">
                <label for="email" class="text-sm font-medium">Email</label>
                <input
                  id="email"
                  name="email"
                  type="email"
                  class="w-full h-10 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm"
                  placeholder="Your email"
                />
              </div>
            </div>
            <div class="space-y-2">
              <label for="subject" class="text-sm font-medium">Subject</label>
              <input
                id="subject"
                name="subject"
                class="w-full h-10 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm"
                placeholder="Message subject"
              />
            </div>
            <div class="space-y-2">
              <label for="message" class="text-sm font-medium">Message</label>
              <textarea
                id="message"
                name="message"
                class="w-full min-h-[120px] rounded-md border border-gray-300 bg-white px-3 py-2 text-sm"
                placeholder="Your message"
              ></textarea>
            </div>
            <button
              type="submit"
              class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2"
            >
              Send Message
            </button>
          </form>
        </div>
      </div>

      <!-- Action buttons -->
      <div class="flex flex-col gap-4 sm:flex-row pt-6 border-t"></div>
    </div>

    <!-- Sidebar column -->
    <div class="space-y-6">
      <div class="rounded-lg border bg-white p-6 shadow-sm">
        <h3 class="text-lg font-medium mb-4">Support This Shelter</h3>
        <p class="text-sm text-gray-500 mb-4">
          Your donation helps us continue our mission of rescuing and rehoming
          cats in need.
        </p>
        <div class="grid grid-cols-3 gap-2 mb-4">
          <button
            class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2"
          >
            $25
          </button>
          <button
            class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2"
          >
            $50
          </button>
          <button
            class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2"
          >
            $100
          </button>
        </div>
        <div class="mb-4">
          <input
            type="number"
            placeholder="Other amount"
            class="w-full h-10 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm"
          />
        </div>
        <button
          class="inline-flex w-full items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2"
        >
          Donate Now
        </button>
      </div>

      <!----- Map Display (Google Maps Integration)-->

      <div class="rounded-lg border bg-white p-6 shadow-sm">
        <h3 class="text-lg font-medium mb-4">Find Our Location</h3>
        <p class="text-sm text-gray-500 mb-4">
          Visit our shelter at the address below or use the map for directions.
        </p>
        <div
          id="map"
          class="w-full h-64 rounded-md border border-gray-200 mb-4"
        ></div>
        <div class="space-y-2 text-sm mb-4">
          <div class="flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="mr-2 h-4 w-4 text-blue-500"
            >
              <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
              <circle cx="12" cy="10" r="3"></circle>
            </svg>
            <%=shelter.location%>
          </div>
          <div class="flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="mr-2 h-4 w-4 text-blue-500"
            >
              <path
                d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"
              ></path>
            </svg>
            <%=shelter.phone%>
          </div>
        </div>
        <a
          href="https://www.google.com/maps/dir/?api=1&destination=<%=encodeURIComponent(shelter.location) %>"
          onclick="getDirections()"
          class="inline-flex w-full items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2"
        >
          Get Directions
        </a>
      </div>

      <!----- Shelter Stats ------>

      <div class="rounded-lg border bg-white p-6 shadow-sm">
        <h3 class="text-lg font-medium mb-4">Shelter Stats</h3>
        <div class="space-y-4">
          <div class="flex items-center justify-between">
            <span class="text-sm font-medium">Cats Available</span>
            <span class="text-sm font-bold"
              ><%= shelter.cats ? shelter.cats.length : 0 %></span
            >
          </div>
          <div class="flex items-center justify-between">
            <span class="text-sm font-medium">Adoptions This Month</span>
            <span class="text-sm font-bold">12</span>
          </div>
          <div class="flex items-center justify-between">
            <span class="text-sm font-medium">Years in Operation</span>
            <span class="text-sm font-bold">8</span>
          </div>
          <div class="flex items-center justify-between">
            <span class="text-sm font-medium">Volunteers</span>
            <span class="text-sm font-bold">25+</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<%- include('../loginRequiredModal') %>

<!-- Comments Section -->
<div class="container px-4 md:px-6 mx-auto pt-0 pb-12" id="comments-section">
  <h2 class="text-xl font-semibold mb-4">Leave a Comment</h2>
  <p class="mb-6 text-gray-600">
    We'd love to hear your thoughts! Share your feedback or ask a question
    below.
  </p>
  <div class="max-w-4xl mx-auto">
    <!-- Comment Form -->
    <% if(user) { %>
    <div class="bg-gray-50 rounded-lg p-4 mb-6">
      <form id="comment-form">
        <div class="flex items-start space-x-3">
          <div
            class="w-10 h-10 bg-primary rounded-full flex items-center justify-center text-white font-medium"
          >
            <%= user.firstName.charAt(0).toUpperCase() %>
          </div>
          <div class="flex-1">
            <textarea
              name="comment"
              required
              rows="3"
              class="w-full px-4 py-3 border-0 bg-white rounded-lg resize-none focus:ring-2 focus:ring-primary/20 focus:outline-none"
              placeholder="Add comment..."
            ></textarea>
            <div class="flex justify-end mt-3">
              <button
                type="submit"
                class="bg-primary hover:bg-primary/90 text-white px-6 py-2 rounded-full font-medium transition-colors disabled:opacity-50"
                id="comment-submit-btn"
              >
                Submit
              </button>
            </div>
          </div>
        </div>
      </form>
    </div>
    <% } else { %>
    <div class="bg-gray-50 rounded-lg p-4 mb-6 text-center">
      <p class="text-gray-600 mb-3">Join the conversation!</p>

      <button
        class="bg-primary hover:bg-primary/90 text-primary-foreground px-6 py-2 rounded-full font-medium transition-colors"
        onclick="loginRequiredModal.show()"
      >
        Sign In to Comment
      </button>
    </div>
    <% } %>

    <!-- Comments Header -->
    <div class="flex items-center justify-between mb-6">
      <div class="flex items-center space-x-2">
        <h3 class="text-xl font-semibold text-gray-900">Comments</h3>
        <span
          class="bg-primary text-white text-sm px-2.5 py-1 rounded-full font-medium"
          id="comment-count"
          >0</span
        >
      </div>
      <div class="flex items-center space-x-2 text-sm text-gray-500"></div>
    </div>

    <!-- Comments Display -->
    <div class="display space-y-4"></div>
  </div>
</div>

<!-- Toast notification for feedback -->
<div id="toast" class="fixed top-4 right-4 z-50 hidden">
  <div class="bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg">
    <span id="toast-message">Success!</span>
  </div>
</div>

<script>
    const user = <%- JSON.stringify(user) %>;
    const shelterId = '<%= shelter._id %>';

    // Toast notification function
    function showToast(message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastMessage = document.getElementById('toast-message');
      const toastDiv = toast.querySelector('div');

      toastMessage.textContent = message;

      // Set color based on type
      if (type === 'success') {
        toastDiv.className = 'bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg';
      } else if (type === 'error') {
        toastDiv.className = 'bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg';
      }

      toast.classList.remove('hidden');

      setTimeout(() => {
        toast.classList.add('hidden');
      }, 3000);
    }

    // Handle main comment form submission
    document.getElementById('comment-form')?.addEventListener('submit', async function(e) {
      e.preventDefault();

      const submitBtn = document.getElementById('comment-submit-btn');
      const textarea = this.querySelector('textarea[name="comment"]');
      const comment = textarea.value.trim();

      if (!comment) return;

      // Disable button and show loading state
      submitBtn.disabled = true;
      submitBtn.textContent = 'Submitting...';

      try {
        const response = await fetch(`/comment/${shelterId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ comment: comment })
        });

        if (response.ok) {
          const newComment = await response.json();

          // Clear the form
          textarea.value = '';

          // Add the new comment to the display
          const displayComments = document.querySelector(".display");

          // If this is the first comment, remove the "no comments" message
          const noCommentsMsg = displayComments.querySelector('.text-center.py-8');
          if (noCommentsMsg) {
            noCommentsMsg.remove();
          }

          // Add new comment at the top
          recursiveDisplay(newComment, displayComments, 0, true);
          updateCommentCount();

          showToast('Comment added successfully!');
        } else {
          const errorData = await response.json();
          showToast(errorData.message || 'Failed to add comment', 'error');
        }
      } catch (error) {
        console.error('Error submitting comment:', error);
        showToast('Error submitting comment', 'error');
      } finally {
        // Re-enable button
        submitBtn.disabled = false;
        submitBtn.textContent = 'Submit';
      }
    });

    // Handle reply form submissions (delegated event handling)
    document.addEventListener('submit', async function(e) {
      if (e.target.closest('.reply-form form')) {
        e.preventDefault();

        const form = e.target;
        const textarea = form.querySelector('textarea[name="reply"]');
        const reply = textarea.value.trim();

        if (!reply) return;

        const submitBtn = form.querySelector('button[type="submit"]');

        // Get comment ID from the data attribute we'll add to the form
        const commentId = form.dataset.commentId;

        // Disable button and show loading state
        submitBtn.disabled = true;
        submitBtn.textContent = 'Replying...';

        try {
          const response = await fetch(`/comment/${commentId}/reply/${shelterId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ reply: reply })
          });

          if (response.ok) {
            const newReply = await response.json();

            // Remove the reply form
            form.closest('.reply-form').remove();

            // Find the comment container and add the new reply
            const commentContainers = document.querySelectorAll('.comment-container');
            for (let container of commentContainers) {
              const commentCard = container.querySelector('.comment-card');
              if (commentCard && commentCard.dataset.commentId === commentId) {
                // Find or create replies container
                let repliesContainer = container.querySelector('.replies-container');
                let toggleContainer = container.querySelector('.toggle-container');

                if (!repliesContainer) {
                  // Create new replies section
                  toggleContainer = document.createElement('div');
                  toggleContainer.className = 'toggle-container mt-2';

                  const toggleButton = document.createElement('button');
                  toggleButton.className = 'flex items-center space-x-1 text-xs text-gray-600 hover:text-gray-800 transition-colors';

                  const arrow = document.createElement('span');
                  arrow.className = 'transform transition-transform duration-200';
                  arrow.innerHTML = 'â–¼';

                  const toggleText = document.createElement('span');
                  toggleText.textContent = '1 reply';

                  toggleButton.appendChild(arrow);
                  toggleButton.appendChild(toggleText);

                  repliesContainer = document.createElement('div');
                  repliesContainer.className = 'replies-container mt-2 space-y-2 transition-all duration-200';

                  // Toggle functionality
                  let isExpanded = true;
                  toggleButton.addEventListener('click', function() {
                    isExpanded = !isExpanded;
                    if (isExpanded) {
                      repliesContainer.style.display = 'block';
                      arrow.style.transform = 'rotate(0deg)';
                      arrow.innerHTML = 'â–¼';
                    } else {
                      repliesContainer.style.display = 'none';
                      arrow.style.transform = 'rotate(-90deg)';
                      arrow.innerHTML = 'â–¶';
                    }
                  });

                  toggleContainer.appendChild(toggleButton);
                  container.appendChild(toggleContainer);
                  container.appendChild(repliesContainer);
                } else {
                  // Update existing toggle text
                  const toggleText = toggleContainer.querySelector('span:last-child');
                  const currentCount = repliesContainer.children.length + 1;
                  toggleText.textContent = `${currentCount} ${currentCount === 1 ? 'reply' : 'replies'}`;
                }

                // Add the new reply to the replies container
                recursiveDisplay(newReply, repliesContainer, 1);
                break;
              }
            }

            showToast('Reply added successfully!');
          } else {
            const errorData = await response.json();
            showToast(errorData.message || 'Failed to add reply', 'error');
          }
        } catch (error) {
          console.error('Error submitting reply:', error);
          showToast('Error submitting reply', 'error');
        } finally {
          // Re-enable button
          submitBtn.disabled = false;
          submitBtn.textContent = 'Reply';
        }
      }
    });

    function updateCommentCount() {
      const commentCount = document.querySelectorAll('.comment-container').length;
      document.getElementById('comment-count').textContent = `${commentCount} comment${commentCount !== 1 ? 's' : ''}`;
    }

    function formatDate(dateString) {
      const date = new Date(dateString);
      const now = new Date();
      const diffTime = Math.abs(now - date);
      const diffMinutes = Math.floor(diffTime / (1000 * 60));
      const diffHours = Math.floor(diffTime / (1000 * 60 * 60));
      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

      if (diffMinutes < 1) return 'Just now';
      if (diffMinutes < 60) return `${diffMinutes} minute${diffMinutes > 1 ? 's' : ''} ago`;
      if (diffHours < 24) return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
      if (diffDays === 1) return `Yesterday at ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
      if (diffDays < 7) return `${diffDays} days ago at ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;

      return `${date.toLocaleDateString()} at ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
    }

    function recursiveDisplay(element, outerBody, depth = 0, prepend = false, beforeElement = null) {
      const commentContainer = document.createElement('div');
      commentContainer.className = `comment-container ${depth > 0 ? 'ml-6 border-l border-gray-200 pl-3' : ''} mb-2`;

      const commentCard = document.createElement('div');
      commentCard.className = 'comment-card overflow-hidden border rounded-lg bg-white p-3 hover:shadow-md transition-shadow';
      commentCard.dataset.commentId = element._id;

      // Comment header with user info and timestamp
      const commentHeader = document.createElement('div');
      commentHeader.className = 'flex items-center justify-between mb-2';

      const userInfo = document.createElement('div');
      userInfo.className = 'flex items-center space-x-2';

      const avatar = document.createElement('div');
      avatar.className = 'w-6 h-6 bg-primary rounded-full flex items-center justify-center text-white text-xs font-medium';
      avatar.textContent = element.postedBy.firstName.charAt(0).toUpperCase();

      const userDetails = document.createElement('div');
      userDetails.innerHTML = `
        <div class="font-medium text-foreground text-sm">${element.postedBy.firstName}</div>
        <div class="text-xs text-muted-foreground">${formatDate(element.createdAt)}</div>
      `;

      userInfo.appendChild(avatar);
      userInfo.appendChild(userDetails);

      // Comment actions (inline with header)
      const commentActions = document.createElement('div');
      commentActions.className = 'flex items-center space-x-2 text-xs';

      // Reply button
      if (user && user.role === "user") {
        const replyButton = document.createElement('button');
        replyButton.className = 'text-[#000] hover:text-[#000]/80 font-medium transition-colors';
        replyButton.textContent = 'Reply';

        replyButton.addEventListener('click', function () {
          // Remove existing reply forms
          const existingForms = commentCard.querySelectorAll('.reply-form');
          existingForms.forEach(form => form.remove());

          const replyForm = document.createElement('div');
          replyForm.className = 'reply-form mt-2 p-2 bg-muted rounded border';
          replyForm.innerHTML = `
            <form data-comment-id="${element._id}" class="space-y-2">
              <textarea
                name="reply"
                required
                rows="2"
                class="w-full px-2 py-1 border border-gray-200 rounded text-sm focus:ring-2 focus:ring-[#FF7A45]/20 focus:border-[#FF7A45] resize-none"
                placeholder="Reply to ${element.postedBy.firstName}..."
              ></textarea>
              <div class="flex space-x-2">
                <button
                  type="submit"
                  class="bg-primary hover:bg-primary/90 text-white px-2 py-1 text-xs font-medium rounded transition-colors"
                >
                  Reply
                </button>
                <button
                  type="button"
                  onclick="this.closest('.reply-form').remove()"
                  class="border border-gray-200 hover:bg-gray-50 px-2 py-1 text-xs font-medium rounded transition-colors"
                >
                  Cancel
                </button>
              </div>
            </form>
          `;

          commentCard.appendChild(replyForm);
        });

        commentActions.appendChild(replyButton);
      }

      // Delete button (only for comment owner)
      if (user?.role === "user" && user._id === element.postedBy._id) {
        const deleteButton = document.createElement('button');
        deleteButton.className = 'text-red-600 hover:text-red-800 font-medium transition-colors';
        deleteButton.textContent = 'Delete';

        deleteButton.addEventListener('click', async function () {
          if (confirm('Delete this comment?')) {
            try {
              const response = await fetch(`/comment/${element._id}/delete/${shelterId}`, {
                method: 'DELETE'
              });

              if (response.ok) {
                commentContainer.remove();
                updateCommentCount();
                showToast('Comment deleted successfully!');
              } else {
                const errorData = await response.json();
                showToast(errorData.message || 'Failed to delete comment', 'error');
              }
            } catch (error) {
              console.error('Error deleting comment:', error);
              showToast('Error deleting comment', 'error');
            }
          }
        });

        commentActions.appendChild(deleteButton);
      }

      commentHeader.appendChild(userInfo);
      commentHeader.appendChild(commentActions);

      // Comment content
      const commentContent = document.createElement('div');
      commentContent.className = 'text-secondary-foreground text-sm leading-relaxed';
      commentContent.textContent = element.text;

      // Assemble comment card
      commentCard.appendChild(commentHeader);
      commentCard.appendChild(commentContent);
      commentContainer.appendChild(commentCard);

      // Add replies with collapsible functionality
      if (element.replies && element.replies.length > 0) {
        // Create toggle button for replies
        const toggleContainer = document.createElement('div');
        toggleContainer.className = 'toggle-container mt-2';

        const toggleButton = document.createElement('button');
        toggleButton.className = 'flex items-center space-x-1 text-xs text-gray-600 hover:text-gray-800 transition-colors';

        const arrow = document.createElement('span');
        arrow.className = 'transform transition-transform duration-200';
        arrow.innerHTML = 'â–¼'; // Down arrow (expanded state)

        const toggleText = document.createElement('span');
        toggleText.textContent = `${element.replies.length} ${element.replies.length === 1 ? 'reply' : 'replies'}`;

        toggleButton.appendChild(arrow);
        toggleButton.appendChild(toggleText);

        // Create replies container
        const repliesContainer = document.createElement('div');
        repliesContainer.className = 'replies-container mt-2 space-y-2 transition-all duration-200';

        // Initially expanded
        let isExpanded = true;

        // Toggle functionality
        toggleButton.addEventListener('click', function() {
          isExpanded = !isExpanded;

          if (isExpanded) {
            repliesContainer.style.display = 'block';
            arrow.style.transform = 'rotate(0deg)';
            arrow.innerHTML = 'â–¼';
          } else {
            repliesContainer.style.display = 'none';
            arrow.style.transform = 'rotate(-90deg)';
            arrow.innerHTML = 'â–¶';
          }
        });

        // Add replies to container
        element.replies.forEach(reply => {
          recursiveDisplay(reply, repliesContainer, depth + 1);
        });

        toggleContainer.appendChild(toggleButton);
        commentContainer.appendChild(toggleContainer);
        commentContainer.appendChild(repliesContainer);
      }

      // Insert the comment container
      if (prepend) {
        outerBody.insertBefore(commentContainer, outerBody.firstChild);
      } else if (beforeElement) {
        outerBody.insertBefore(commentContainer, beforeElement);
      } else {
        outerBody.appendChild(commentContainer);
      }
    }

    // Load comments when DOM is ready
    document.addEventListener('DOMContentLoaded', function () {
      const displayComments = document.querySelector(".display");

      fetch(`/comment/${shelterId}`)
        .then(response => response.json())
        .then(data => {
          if (data.length > 0) {
            data.forEach(comment => {
              recursiveDisplay(comment, displayComments);
            });
            updateCommentCount();
          } else {
            displayComments.innerHTML = `
              <div class="text-center py-8">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="mx-auto text-muted-foreground mb-2">
                  <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                </svg>
                <p class="text-sm text-muted-foreground">No comments yet. Be the first to share your thoughts!</p>
              </div>
            `;
            document.getElementById('comment-count').textContent = '0 comments';
          }
        })
        .catch(error => {
          console.error('Error fetching comments:', error);
          displayComments.innerHTML = `
            <div class="text-center py-6 text-red-600">
              <p class="text-sm">Error loading comments. Please try again later.</p>
            </div>
          `;
        });
    });

    function showSection(sectionId) {
      // Hide all sections
      document.getElementById("about").style.display = "none";
      document.getElementById("available").style.display = "none";
      document.getElementById("process").style.display = "none";
      document.getElementById("contact").style.display = "none";
      // Remove active class from all tabs
      document.querySelectorAll('.tab-button').forEach(tab => {
        tab.classList.remove('border-blue-500', 'text-blue-600');
        tab.classList.add('border-transparent', 'text-gray-500');
      });

      // Show the selected section
      document.getElementById(sectionId).style.display = "block";

      // Add active class to selected tab
      const activeTab = document.getElementById(sectionId + '-tab');
      if (activeTab) {
        activeTab.classList.remove('border-transparent', 'text-gray-500');
        activeTab.classList.add('border-blue-500', 'text-blue-600');
      }
    }

    // This runs when the page first loads
    window.onload = function () {
      showSection("available");
    };




  //Maps

  // Initialize and add the map
  let map;

  async function initMap() {
    console.log("Initializing map...");
    // The location of Uluru
    const position = { lat: <%=shelter.coordinates.lat%>, lng: <%=shelter.coordinates.lng%> };
    // Request needed libraries.
    //@ts-ignore
    const { Map } = await google.maps.importLibrary("maps");
    const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

    // The map, centered at Uluru
    map = new Map(document.getElementById("map"), {
      zoom: 14,
      center: position,
      mapId: "DEMO_MAP_ID",
    });

    // The marker, positioned at Uluru
    const marker = new AdvancedMarkerElement({
      map: map,
      position: position,
      title: "Uluru",
    });
  }

  initMap();
</script>
